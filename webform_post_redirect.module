<?php

  /**
   * @file
   *   Webform Post Redirect module.
   */

  /**
   * Implements hook_permission().
   */
  function webform_post_redirect_permission() {
    return array(
      'configure post redirect' => array(
        'title' => t('Configure POST redirect on webforms.'),
        'description' => t('Allows access to POST options for custom redirects on webforms.'),
      ),
    );
  }

  /**
   * Implements hook_form_alter()
   *
   * Adds additional option to post values with a redirect
   */
  function webform_post_redirect_form_alter(&$form, $form_state, $form_id) {

    if ($form_id == 'webform_configure_form') {

      $defaults = webform_post_redirect_get_page_defaults();

      // Add script to hide or show POST redirect elements when they are not relevant
      drupal_add_js(drupal_get_path('module', 'webform_post_redirect')
          . '/js/webform_post_redirect-admin.js');

      // Get page node
      $node = node_load($form['#node']->nid);

      // Load previously saved post data if available
      $redirect = webform_post_redirect_load($node->nid);

      // Format included components into array if exists
      if ($redirect['included_components']) {

        $included_components = webform_post_redirect_component_array($redirect['included_components']);

      } else {
        $included_components = array_keys($node->webform['components']);
      }

      // Add extra validate and submit functions
      $form['#validate'][] = 'webform_post_redirect_form_validate';
      $form['#submit'][]   = 'webform_post_redirect_form_submit';

      // Checkbox
      $form['submission']['redirection']['redirect_post'] = array(
        '#type'          => 'checkbox',
        '#title'         => t('Include POST data from submission when redirecting user?'),
        '#default_value' => $redirect['status'],
        '#parents'       => array('redirect_post'),
      );

      // Get all of the components of this form except those in the excluded list
      $components = webform_post_redirect_get_form_components($node->nid);

      // Component list field
      $form['submission']['redirection']['components'] = array(
        '#type'          => 'select',
        '#title'         => t('Included POST values'),
        '#options'       => $components,
        '#default_value' => $included_components,
        '#multiple'      => TRUE,
        '#size'          => 10,
        '#description'   => t('The selected components will be included data
                              sent via POST along with the user to the redirect location.'),
        '#process'       => array('webform_component_select'),
      );

      // Exclude empty option field
      $form['submission']['redirection']['components']['suffix']['exclude_empty'] = array(
        '#type'          => 'checkbox',
        '#title'         => t('Exclude empty components'),
        '#default_value' => $redirect['exclude_empty'],
      );

      // Multivalue field format option field
      $form['submission']['redirection']['components']['suffix']['multivalue'] = array(
        '#type'          => 'radios',
        '#title'         => t('Multivalue Field Format'),
        '#options'       => array('json' => t('JSON'), 'serialize' => t('PHP Serialization')),
        '#default_value' => $redirect['multivalue_format'],
        '#description'   => t('The POST string encoding format for fields that contain multiple values, such as checkboxes.'),
      );

      // Redirect Page Settings fieldset
      $form['submission']['redirection']['page_settings'] = array(
        '#type'        => 'fieldset',
        '#title'       => t('Redirect Page Settings'),
        '#collapsible' => TRUE,
        '#collapsed'   => TRUE,
      );

      // Page Title text field
      $form['submission']['redirection']['page_settings']['page_title'] = array(
        '#type'          => 'textfield',
        '#title'         => t('Page title'),
        '#default_value' => $redirect['page_title'],
        '#description'   => t('The page title value for the redirect page. If left blank, the default title "!default" will be used.', array('!default' => t($defaults['page_title']))),
      );

      // Page text field
      $form['submission']['redirection']['page_settings']['message'] = array(
        '#type'          => 'text_format',
        '#title'         => t('Page Text'),
        '#default_value' => $redirect['message'],
        '#format'        => $redirect['message_format'],
        '#description'   => t('A message to be displayed on the redirect page. If left blank, the message "!default" will be used.', array('!default' => t($defaults['message']))),
      );

      // Page text field
      $form['submission']['redirection']['page_settings']['button_text'] = array(
        '#type'          => 'textfield',
        '#title'         => t('Redirect button label'),
        '#default_value' => $redirect['button_text'],
        '#description'   => t('The label for the manual redirect button on the redirect page. If left blank, the default label "!default" will be used.', array('!default' => t($defaults['button_text']))),
      );

      // Only allow users with permission to access these options
      if (!user_access('configure post redirect')) {
        $form['submission']['redirection']['components']['suffix']['exclude_empty']['#access'] = FALSE;
        $form['submission']['redirection']['components']['#access'] = FALSE;
        $form['submission']['redirection']['redirect_post']['#access'] = FALSE;
        $form['submission']['redirection']['page_settings']['#access'] = FALSE;
      }
    }

  }

  /**
   * Adding additional validation actions for the webform configure form
   */
  function webform_post_redirect_form_validate($form, &$form_state) {

    $values = $form_state['values'];

    // Check that POST redirect checkbox is checked
    if ($values['redirect_post'] == 1) {

      $component_is_selected = FALSE;
      $index = 1;

      // Loop through components and make sure one is selected
      foreach ($values['components'] as $component) {

        // Test if it is selected
        if ($component != 0) {
          $component_is_selected = TRUE;
          break;
        }
      }

      // If no components are selected, show error
      if (!$component_is_selected) {
        form_set_error('components', t('You must select at least one component to POST.'));
      }
    }
  }

  /**
   * Adding additional submit actions for the webform configure form
   */
  function webform_post_redirect_form_submit($form, &$form_state) {

    $nid = $form['#node']->nid;

    // Get comma separated list of values from checkbox associative array
    $included_components = implode(', ', array_filter(array_values($form_state['values']['components'])));

    // Create array for the database record
    $fields = array(
      'included_components' => $included_components,
      'exclude_empty'       => $form_state['values']['exclude_empty'],
      'status'              => $form_state['values']['redirect_post'],
      'multivalue_format'   => $form_state['values']['multivalue'],
      'page_title'          => $form_state['values']['page_title'],
      'message'             => $form_state['values']['message']['value'],
      'message_format'      => $form_state['values']['message']['format'],
      'button_text'         => $form_state['values']['button_text'],
    );

    // Update or insert row depending on if one exists for this node already
    if (webform_post_redirect_check_record_exists($nid)) {

      webform_post_redirect_update_components($nid, $fields);

    } else {

      // Add node id to fields since this is a new record
      $fields['nid'] = $nid;

      webform_post_redirect_insert_components($fields);
    }
  }

  /**
   * Load a POST redirect array from table row
   */
  function webform_post_redirect_load($nid) {
    $redirect = db_select('webform_post_redirects', 'p')
        ->fields('p')
        ->condition('nid', $nid, '=')
        ->execute()
        ->fetchAssoc();

    // If nothing is in DB, return an empty array with the same structure
    if (empty($redirect)) {
      $redirect = array(
        'nid'                 => NULL,
        'included_components' => array(),
        'exclude_empty'       => NULL,
        'status'              => NULL,
        'multivalue_format'   => 'json',
        'page_title'          => NULL,
        'message'             => NULL,
        'message_format'      => NULL,
        'button_text'         => NULL,
      );
    }

    return $redirect;
  }

  /**
   * Implements hook_webform_submission_insert().
   *
   * Respond to a Webform submission being inserted.
   *
   * Note that this hook is called after a submission has already been saved to
   * the database.
   *
   * This is the start of the process to redirect a user with their submission
   * data stored in a POST request.
   */
  function webform_post_redirect_webform_submission_insert($node, $submission) {

    global $base_url;

    $redirect = webform_post_redirect_load($node->nid);

    if ($redirect['status'] == 1) {
      watchdog('webform_post_redirect', 'POST redirect enabled for '
          . $node->title . '. Redirecting user.');
      header('Location: ' . $base_url . '/node/' . $node->nid . '/redirect/' . $submission->sid);
      die();
    }
  }

  /**
   * Implements hook_menu().
   */
  function webform_post_redirect_menu() {
    $items = array();

    $items['node/%/redirect/%'] = array(
      'title'           => 'Redirecting',
      'page callback'   => 'webform_post_redirect_page',
      'page arguments'  => array(1, 3),
      'access callback' => TRUE,
      'file'            => 'includes/webform_post_redirect.pages.inc',
      'type'            => MENU_CALLBACK,
    );

    return $items;
  }

 /**
  * Implements hook_webform_component_delete().
  */
  function webform_post_redirect_webform_component_delete($component) {

    $data = webform_post_redirect_load($component['nid']);

    if (!empty($data['included_components'])) {

      // convert to array
      $included_components = webform_post_redirect_component_array($data['included_components']);

      $index = array_search($component['cid'], $included_components);

      // remove from array
      unset($included_components[$index]);

      // If no components left, just remove the record
      if (!empty($included_components)) {

        $included_components = implode(', ', $included_components);

        webform_post_redirect_update_components($component['nid'], array('included_components' => $included_components));

      } else {

        // Remove redirect record
        webform_post_redirect_remove_record($component['nid']);
      }
    }
  }

  /**
   * Converts string of components into array
   *
   * @param String $components    A comma separated list of components IDs
   * @return Array of components IDs
   */
  function webform_post_redirect_component_array($components) {

    if (strpos($components, ', ') !== FALSE) {
      $included_components = explode(', ', $components);

    } else {
      $included_components = array($components);
    }

    return $included_components;
  }

  /**
   * This function provides an array of default components to exclude from the Post Redirect
   * options beause they don't work well via post or have no data to send
   *
   * This function calls hook_excluded_components_alter to allow developers to
   * restrict more component types if needed.
   *
   * @return Array of excluded components name strings
   */
  function webform_post_redirect_excluded_components() {

    // Default list of components that
    $excluded_components = array('file', 'fieldset', 'markup', 'pagebreak');

    // Calling all modules implementing hook_excluded_components_alter():
    drupal_alter('webform_post_redirect_excluded_components', $excluded_components);

    return $excluded_components;
  }

  /**
   * This function provides an array of components available to send via POST
   * for a specific webform node.
   *
   * @param int  $nid  ID of webform node
   * @return Associative array of component IDs and component names
   */
  function webform_post_redirect_get_form_components($nid) {
    $result = db_select('webform_component', 'wc')
        ->fields('wc', array('cid', 'name'))
        ->condition('wc.nid', $nid, '=')
        ->condition('wc.type', webform_post_redirect_excluded_components(), 'NOT IN')
        ->orderby('weight', 'ASC')
        ->execute();

    return $result->fetchAllKeyed(0, 1);
  }

  /**
   * This function updates the component list for a post redirect record
   *
   * @param int              $nid         ID of webform node
   * @param associate array  $components  Array of columns and values to update
   */
  function webform_post_redirect_update_components($nid, $fields) {
    $success = db_update('webform_post_redirects')
        ->condition('nid', $nid, '=')
        ->fields($fields)
        ->execute();

    // Log error
    if ($success === FALSE) {
      drupal_set_message(t('An error occurred while trying to update the POST redirect setting.'), 'error');
      watchdog('webform_post_redirect', 'An error occurred while trying to update the POST redirect setting.', array(), WATCHDOG_ERROR);
    }
  }

  /**
   * This function creates a new post redirect record
   *
   * @param associate array  $components  Array of columns and values to insert
   */
  function webform_post_redirect_insert_components($fields) {
    $success = db_insert('webform_post_redirects')
        ->fields($fields)
        ->execute();

    // Log error
    if ($success === FALSE) {
      drupal_set_message(t('An error occurred while writing a new POST redirect to the database.'), 'error');
      watchdog('webform_post_redirect', 'An error occurred while writing a new POST redirect to the database.', array(), WATCHDOG_ERROR);
    }
  }

  /**
   * This function removes a post redirect record
   *
   * @param int  $nid  ID of webform node
   */
  function webform_post_redirect_remove_record($nid) {
    $success = db_delete('webform_post_redirects')
        ->condition('nid', $nid, '=')
        ->execute();

    // Log error
    if ($success === FALSE) {
      drupal_set_message(t('An error occurred while trying to remove the POST redirect setting.'), 'error');
      watchdog('webform_post_redirect', 'An error occurred while trying to remove the POST redirect setting.', array(), WATCHDOG_ERROR);

    } else {
      watchdog('webform_post_redirect', "The POST redirect setting for node $nid has been removed.", array(), WATCHDOG_ERROR);
    }
  }

  /**
   * This function checks if a post redirect record exists for this node
   *
   * @param int  $nid  ID of webform node
   * @return A boolean value for if the record exists
   */
  function webform_post_redirect_check_record_exists($nid) {

    $count = db_select('webform_post_redirects', 'p')
        ->condition('nid', $nid, "=")
        ->countQuery()
        ->execute()
        ->fetchField();

    if ($count > 0) {
      return TRUE;
    } else {
      return FALSE;
    }
  }

  /**
   * Implements hook_theme().
   */
  function webform_post_redirect_theme() {

    $module_path = drupal_get_path('module', 'webform_post_redirect');

    return array(
      'webform_post_redirect_page' => array(
        'variables' => array('form' => NULL, 'page_title' => NULL, 'message' => NULL),
        'template' => 'templates/webform-post-redirect-page',
      ),
    );
  }

  /*
   * Get array of default values for redirect page values
   */
  function webform_post_redirect_get_page_defaults() {
    return array(
      'page_title'  => 'Redirecting',
      'message'     => '<p>If your browser does not automatically redirect you in a few moments, please click the button below.</p>',
      'button_text' => 'Redirect Now',
    );
  }

